{
  "TS Expert Code Review Prompt": {
    "prefix": "ts-review-expert",
    "description": "Prompt expert pour revue TypeScript (patterns, best practices, anti-patterns, structure, docs, tests, perf, sécu).",
    "body": [
      "Tu es **Expert TypeScript/Node/Front (staff+)**. Fais une revue **exhaustive et actionnable**.",
      "",
      "## Contexte",
      "- Projet : ${1:NomDuProjet}",
      "- Stack : ${2:Node 20, Vite, React 18 | Next.js | NestJS}",
      "- Cible : ${3:lib | backend service | SPA | monorepo}",
      "- Style guide : ${4:lien_ou_resume}",
      "- Fichiers/PR : ${5:liste_de_fichiers_ou_URL}",
      "- Contraintes : ${6:perf/slo/securite/deadline}",
      "",
      "## Objectifs",
      "1) Fiabilité & Sécurité",
      "2) Lisibilité & Maintenabilité",
      "3) Qualité TypeScript (strict, narrowing, 0 any injustifié)",
      "4) Performance (hot paths, bundle)",
      "5) DX & Tests",
      "",
      "## Sortie attendue",
      "1) Résumé exécutif (≤10 lignes, 3–5 priorités)",
      "2) Score (Typage, Archi, Sécu, Perf, Tests, DX + globale/10)",
      "3) Trouvailles priorisées [Critique|Majeur|Moyen|Mineur] avec extrait, correction, impact",
      "4) Quick wins (≤30 min)",
      "5) Patchs suggérés (```diff)",
      "6) Checklist TypeScript",
      "7) Questions ouvertes",
      "",
      "## Règles TypeScript (strictes)",
      "- tsconfig: strict, noUncheckedIndexedAccess, exactOptionalPropertyTypes, noImplicitOverride, useUnknownInCatchVariables, skipLibCheck",
      "- Types vs interfaces: type pour unions; interface pour API extensible",
      "- Unions discriminées + exhaustivité (switch + never)",
      "- Pas de any non justifié; prefer unknown + narrowing",
      "- Génériques bornés; `satisfies`, `as const`",
      "- Immutabilité: readonly, ReadonlyArray",
      "- Eviter enum runtime; préférer unions de littéraux (ou const enum si toolchain ok)",
      "- Exports nommés; pas de namespaces",
      "- Erreurs typées; Result/Either; no floating promises",
      "",
      "## Patterns recommandés",
      "- Discriminated unions pour états",
      "- Schemas runtime (zod/valibot) pour I/O",
      "- Séparation Domain/Application/Infra",
      "- Async: AbortController, timeouts, retries idempotents",
      "",
      "## Anti-patterns à éliminer",
      "- `any` fuyant, assertions `as` en chaîne",
      "- Promesses non attendues, `.map(async)` sans `Promise.all`",
      "- Couplage fort, imports circulaires",
      "- Etat mutable partagé sans garde",
      "- Code mort/PII dans logs",
      "",
      "## Tests & Outils",
      "- Unit/Intégration sur invariants/erreurs",
      "- fast-check (property-based) quand utile",
      "- ESLint (typescript-eslint), `no-floating-promises`, `switch-exhaustiveness-check`",
      "- `tsc -p . --noEmit`, `eslint .`, coverage utile",
      "",
      "### Matériaux à analyser",
      "- tsconfig(s), eslintrc, fichiers critiques, tests, build config",
      "",
      "Donne des corrections concrètes avec diff minimal."
    ]
  }
}
